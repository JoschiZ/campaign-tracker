@using SeasonOfGhosts.Components.Shared
@using SeasonOfGhosts.Core
@using SeasonOfGhosts.Core.Settlements
@inherits UnitOfWorkComponentBase
@inject IDialogService DialogService

<MudCard>
    <MudCardContent>
        <MudGrid>
            <MudItem xs="12">
                <MudText Typo="Typo.subtitle1">@Settlement.Name</MudText>
            </MudItem>
            <MudItem xs="6">
                <MudNumericField Value="Settlement.Population"
                                 Adornment="Adornment.End"
                                 AdornmentIcon="@Icons.Material.Filled.Edit"
                                 OnAdornmentClick="AdjustPopulation"
                                 HideSpinButtons
                                 ReadOnly
                                 Label="Population">
                </MudNumericField>
            </MudItem>
            <MudItem xs="6">
                <MudNumericField Value="Settlement.Level"
                                 Adornment="Adornment.End"
                                 AdornmentIcon="@Icons.Material.Filled.Edit"
                                 OnAdornmentClick="AdjustLevel"
                                 HideSpinButtons
                                 ReadOnly
                                 Label="Level">
                </MudNumericField>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

@code {
    [Parameter, EditorRequired] public required Settlement Settlement { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task AdjustPopulation()
    {
        var dialog = await AdjustSelect.ShowAsync(DialogService, -100, 100);
        var result = await dialog.Result;
        if (result is not { Canceled: false, Data: Adjustment adjustment })
        {
            return;
        }

        await Settlement.AdjustPopulationAsync(adjustment, Context);
    }

    private async Task AdjustLevel()
    {
        var dialog = await DialogService.ShowAsync<AdjustSelect>();
        var result = await dialog.Result;
        if (result is not { Canceled: false, Data: Adjustment adjustment })
        {
            return;
        }

        await Settlement.AdjustLevelAsync(adjustment, Context);
    }

}