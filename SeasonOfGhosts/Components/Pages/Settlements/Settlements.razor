@page "/settlements"
@using Microsoft.EntityFrameworkCore
@using SeasonOfGhosts.Core.Campaigns
@using SeasonOfGhosts.Core.Settlements
@inherits UnitOfWorkComponentBase
<PageTitle>Settlements</PageTitle>
@if (_campaign is not null)
{
    <MudGrid>
        <MudItem xs="12">
            <MudTextField @bind-Value="@_nameSearch" Placeholder="Search by name"></MudTextField>
        </MudItem>
        @foreach (var settlement in _campaign.Settlements.Where(x => x.Name.Contains(_nameSearch)))
        {
            <MudItem xs="12" md="6">
                    <SettlementRow Settlement="settlement"></SettlementRow>
            </MudItem>
        }
        <MudItem xs="12">
            <MudButton
                FullWidth
                Variant="Variant.Filled"
                Color="Color.Primary"
                EndIcon="@Icons.Material.Filled.AddCircle"
                OnClick="StartCreate">New Settlement</MudButton>
        </MudItem>
    </MudGrid>
    
    <MudDialog @bind-Visible="@_createNewVisible">
        <TitleContent>
            New Settlement
        </TitleContent>
        <DialogContent>
            <MudForm>
                <MudTextField Label="Name" @bind-Value="@_model.Name"></MudTextField>
                <MudNumericField Label="Level" @bind-Value="@_model.Level"></MudNumericField>
                <MudNumericField Label="Population" @bind-Value="@_model.Population"></MudNumericField>
                <MudCheckBox Label="Main Settlement" @bind-Value="@_model.IsMainSettlement"></MudCheckBox>
            </MudForm>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="CancelCreation">Cancel</MudButton>
            <MudLoadingButton Variant="Variant.Filled" Color="Color.Success" OnClick="SaveNewSettlement">Save</MudLoadingButton>
        </DialogActions>
    </MudDialog>
}

@code {
    [CascadingParameter]
    public CampaignId CampaignId { get; set; }

    private Campaign? _campaign;
    private bool _createNewVisible;
    private string _nameSearch = "";
    private CreateSettlement _model = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _campaign = await Context
            .Campaigns
            .Where(x => x.Id == CampaignId)
            .Include(x => x.Settlements)
            .FirstAsync();
    }

    private void StartCreate()
    {
        _createNewVisible = true;
    }

    private void CancelCreation()
    {
        _createNewVisible = false;
        _model = new CreateSettlement();
    }

    private async Task SaveNewSettlement()
    {
        if (_campaign is null)
        {
            return;
        }
        
        var settlement = new Settlement(_model.Level, _model.Population)
        {
            Campaign = _campaign,
            Name = _model.Name,
        };

        if (_model.IsMainSettlement)
        {
            _campaign.MainSettlement = settlement;
        }
        
        _campaign.Settlements.Add(settlement);
        await Context.SaveChangesAsync();
        _createNewVisible = false;
        _model = new CreateSettlement();
    }

    private class CreateSettlement
    {
        public string Name { get; set; } = "";
        public int Level { get; set; } = 1;
        public int Population { get; set; }
        public bool IsMainSettlement { get; set; }
    }
}