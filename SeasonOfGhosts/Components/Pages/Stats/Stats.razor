@page "/stats"
@using Microsoft.EntityFrameworkCore
@using SeasonOfGhosts.Core.Campaigns
@using SeasonOfGhosts.Core.Stats
@inherits UnitOfWorkComponentBase
<PageTitle>Stats</PageTitle>

@if (_campaign is not null)
{
    <MudGrid>
        <MudItem xs="12">
            <MudTextField @bind-Value="@_nameSearch" Placeholder="Search by name"></MudTextField>
        </MudItem>
        @foreach (var stat in _campaign.Stats.Where(x => x.Name.Contains(_nameSearch)))
        {
            <StatRow Stat="stat"></StatRow>
        }
        <MudItem xs="12">
            <MudButton
                FullWidth
                Variant="Variant.Filled"
                Color="Color.Primary"
                EndIcon="@Icons.Material.Filled.AddCircle"
                OnClick="StartCreate">New Stat</MudButton>
        </MudItem>
    </MudGrid>
    
    <MudDialog @bind-Visible="@_createNewStatVisible">
        <TitleContent>
            New Stat
        </TitleContent>
        <DialogContent>
            <MudForm>
                <MudTextField @bind-Value="@_model.Name"></MudTextField>
            </MudForm>
        </DialogContent>
        <DialogActions>
            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="CancelCreation">Cancel</MudButton>
            <MudLoadingButton Variant="Variant.Filled" Color="Color.Success" OnClick="SaveNewStat">Save</MudLoadingButton>
        </DialogActions>
    </MudDialog>
}


@code {
    [CascadingParameter]
    public required CampaignId CampaignId { get; set; }

    private Campaign? _campaign;
    private string _nameSearch = "";
    private CreateNewStat _model = new();
    private bool _createNewStatVisible;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _campaign = await Context
            .Campaigns
            .Where(x => x.Id == CampaignId)
            .Include(x => x.Stats)
            .FirstAsync();
    }

    private void StartCreate() => _createNewStatVisible = true;

    private async Task SaveNewStat()
    {
        if (_campaign is null)
        {
            return;
        }
        
        var newStat = new Stat()
        {
            Campaign = _campaign,
            Name = _model.Name
        };
        
        _campaign.Stats.Add(newStat);
        await Context.SaveChangesAsync();
        _model = new CreateNewStat();
        _createNewStatVisible = false;
    }

    private void CancelCreation()
    {
        _createNewStatVisible = false;
        _model = new CreateNewStat();
    }


    private class CreateNewStat
    {
        public string Name { get; set; } = "";
    }
}