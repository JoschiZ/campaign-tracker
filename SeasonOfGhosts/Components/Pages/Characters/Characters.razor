@page "/characters"
@using Microsoft.EntityFrameworkCore
@using SeasonOfGhosts.Core
@using SeasonOfGhosts.Core.Campaigns
@using SeasonOfGhosts.Core.Characters
@using SeasonOfGhosts.Core.Factions
@inherits UnitOfWorkComponentBase
@inject IDialogService DialogService
<PageTitle>Characters</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudTextField Placeholder="Search by name" @bind-Value="@_characterNameSearch" Immediate></MudTextField>
    </MudItem>
    @foreach (var character in _characters.Where(x => x.Name.Contains(_characterNameSearch)))
    {
        <MudItem xs="12" md="6">
            <MudCard>
                <MudCardContent >
                    <MudGrid>
                        <MudItem xs="7"><MudButton Variant="Variant.Text" Href="@AppRoutes.GetCharacterPage(character.Id)">@character.Name</MudButton></MudItem>
                        <MudItem xs="5"><AttitudeSelect Character="character"></AttitudeSelect></MudItem>
                        <MudItem xs="9">
                            <MudStack Row>
                                <MudTextField Margin="Margin.Dense" Variant="Variant.Filled" Underline="false" ReadOnly Value="@character.ShortDescription"></MudTextField>
                                @foreach (var faction in character.Factions)
                                {
                                    <MudChip T="Faction" Value="faction">@faction.Name</MudChip>
                                }
                            </MudStack>
                        </MudItem>
                        <MudItem xs="3">
                            <MudNumericField Value="character.Influence"
                                             Adornment="Adornment.End"
                                             AdornmentIcon="@Icons.Material.Filled.Edit"
                                             OnAdornmentClick="() => AdjustInfluenceAsync(character)"
                                             HideSpinButtons
                                             ReadOnly
                                             Label="Influence"></MudNumericField>
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>
    }
    <MudItem xs="12">
        <MudButton
            FullWidth
            Variant="Variant.Filled"
            EndIcon="@Icons.Material.Filled.AddCircle"
            Color="Color.Primary"
            OnClick="StartCreatingNewCharacterAsync">Add Character</MudButton>
    </MudItem>
</MudGrid>

<MudDialog @bind-Visible="_createCharacterDialogVisible">
    <TitleContent>
        New Character
    </TitleContent>
    <DialogContent>
        <MudForm>
            <MudTextField @bind-Value="@_model.Name" Label="Name"></MudTextField>
            <MudTextField @bind-Value="@_model.ShortDescription" Label="Title/Profession"></MudTextField>
            <MudNumericField @bind-Value="@_model.Influence" Label="Influence"></MudNumericField>
            <MudSelect @bind-Value="@_model.StartingAttitude" T="Attitude">
                <MudSelectItem Value="Attitude.Hostile">
                    <MudText Color="Color.Error">@Attitude.Hostile</MudText>
                </MudSelectItem>
                <MudSelectItem Value="Attitude.Unfriendly">
                    <MudText Color="Color.Warning">@Attitude.Unfriendly</MudText>
                </MudSelectItem>
                <MudSelectItem Value="Attitude.Indifferent">
                    <MudText Color="Color.Default">@Attitude.Indifferent</MudText>
                </MudSelectItem>
                <MudSelectItem Value="Attitude.Friendly">
                    <MudText Color="Color.Info">@Attitude.Friendly</MudText>
                </MudSelectItem>
                <MudSelectItem Value="Attitude.Helpful">
                    <MudText Color="Color.Success">@Attitude.Helpful</MudText>
                </MudSelectItem>
            </MudSelect>
            <MudStack Row>
                <MudSelect ToStringFunc="x => x?.Name" Label="Factions" T="Faction" MultiSelection @bind-SelectedValues="@_model.Factions">
                    @foreach (var faction in _factions)
                    {
                    <MudSelectItem Value="@faction">@faction.Name</MudSelectItem>
                    }
                </MudSelect>
                @foreach (var faction in _model.Factions)
                {
                <MudChip T="Faction" Value="faction" OnClose="() => _model.Factions = _model.Factions.Where(x => x.Id != faction.Id)">@faction.Name</MudChip>
                }
            </MudStack>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudLoadingButton Color="Color.Error" OnClick="AbortCreatingCharacter">Discard</MudLoadingButton>
        <MudLoadingButton Color="Color.Success" OnClick="SaveNewCharacterAsync">Save</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    private bool _createCharacterDialogVisible;
    
    [CascadingParameter]
    public required CampaignId CampaignId { get; set; }
    private List<Character> _characters = [];
    private IReadOnlyList<Faction> _factions = [];
    private CreateCharacterModel _model = new();
    private string _characterNameSearch = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var campaign = await Context
            .Campaigns
            .Where(x => x.Id == CampaignId)
            .Include(x => x.Characters)
            .ThenInclude(x => x.Factions)
            .FirstAsync();
        _characters = campaign.Characters;
    }

    private async Task StartCreatingNewCharacterAsync()
    {
        _factions = await Context
            .Campaigns
            .Where(x => x.Id == CampaignId)
            .Select(x => x.Factions)
            .FirstAsync();
        _createCharacterDialogVisible = true;
    }

    private void AbortCreatingCharacter()
    {
        _model = new CreateCharacterModel();
        _createCharacterDialogVisible = false;
    }

    private async Task SaveNewCharacterAsync()
    {
        var campaign = await Context.Campaigns.FindAsync(CampaignId);

        if (campaign is null)
        {
            return;
        }
        
        var character = new Character(_model.Influence, _model.StartingAttitude)
        {
            Name = _model.Name,
            ShortDescription = _model.ShortDescription,
            Factions = _model.Factions.ToList(),
            Campaign = campaign,
        };

        campaign.Characters.Add(character);

        await Context.SaveChangesAsync();
            
        _createCharacterDialogVisible = false;
        _model = new CreateCharacterModel();
    }
    
    private class CreateCharacterModel
    {
        public string Name { get; set; } = "";
        public string ShortDescription { get; set; } = "";
        public Attitude StartingAttitude { get; set; }
        public int Influence { get; set; }
        public IEnumerable<Faction> Factions { get; set; } = [];

    }

    private async Task AdjustInfluenceAsync(Character character)
    {
        var dialog = await DialogService.ShowAsync<AdjustSelect>();
        var result = await dialog.Result;
        
        if (result?.Data is not Adjustment adjustment)
        {
            return;
        }

        await character.ChangeInfluence(adjustment, Context);
    }

}