@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.EntityFrameworkCore
@using SeasonOfGhosts.Core.Campaigns
@using SeasonOfGhosts.Db
@inject IDbContextFactory<SeasonContext> DbFactory;
@inject ILocalStorageService LocalStorage
@inject ISnackbar Snackbar


<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h5">Enter your campaign code</MudText>
        <MudGrid>
            <MudItem xs="12" md="7">
                <MudTextField Variant="Variant.Outlined"
                              Margin="Margin.Dense"
                              @bind-Value="_campaignCode"
                              @bind-Value:after="() => SearchCampaign(_campaignCode)"
                              MaxLength="10"
                              Immediate
                              ></MudTextField>
            </MudItem>
            <MudItem xs="12" md="5">
                <MudLoadingButton Variant="Variant.Filled" FullWidth Disabled="@(_campaignCode?.Length != 10)" OnClick="() => SearchCampaign(_campaignCode)">Search</MudLoadingButton>
            </MudItem>
        </MudGrid>
        <MudDivider Style="margin-top: 0.5rem; margin-bottom: 0.5rem" DividerType="DividerType.FullWidth"></MudDivider>
        <MudText Typo="Typo.h5">Or create a new campaign</MudText>
        <MudForm>
            <MudTextField Label="Name" @bind-Value="@_newCampaignName"></MudTextField>
        </MudForm>
        <MudButtonGroup>
            <MudLoadingButton OnClick="CreateNewCampaign">New Campaign</MudLoadingButton>
        </MudButtonGroup>
    </MudCardContent>
</MudCard>

<MudOverlay DarkBackground @bind-Visible="@_loading">
    <MudProgressCircular Indeterminate Color="Color.Primary"></MudProgressCircular>
</MudOverlay>



@code {
    private string? _campaignCode;
    private string _newCampaignName = "Season of Ghosts";
    private bool _loading;
    
    [SupplyParameterFromQuery(Name = "code")]
    public string? QueryCode { get; set; }

    [Parameter]
    public Campaign? SelectedCampaign { get; set; }
    
    [Parameter]
    public EventCallback<Campaign?> SelectedCampaignChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (!firstRender)
        {
            return;
        }

        if (QueryCode is not null)
        {
            _campaignCode = QueryCode;
        }
        await SearchCampaign(QueryCode);
        if (SelectedCampaign is not null)
        {
            return;
        }
        
        
        if (await LocalStorage.ContainKeyAsync(StorageKeys.LastCampaignId))
        {
            try
            {
                var lastCampaign = await LocalStorage.GetItemAsync<CampaignId>(StorageKeys.LastCampaignId);
                await using var context = await DbFactory.CreateDbContextAsync();
                _loading = true;
                SelectedCampaign = await context.Campaigns.FindAsync(lastCampaign);
                _loading = false;
                await OnSelectedCampaignChanged();
            }
            catch (Exception)
            {
                await LocalStorage.RemoveItemAsync(StorageKeys.LastCampaignId);
            }

        }
    }

    private async Task OnSelectedCampaignChanged()
    {
        if (SelectedCampaign is not null)
        {
            await LocalStorage.SetItemAsync(StorageKeys.LastCampaignId, SelectedCampaign.Id);   
        }
        await SelectedCampaignChanged.InvokeAsync(SelectedCampaign);
    }
    
    private async Task SearchCampaign(string? code)
    {
        if (code is not {Length: 10})
        {
            return;
        }

        _loading = true;
        await using var context = await DbFactory.CreateDbContextAsync();
        SelectedCampaign = await context
            .Campaigns
            .Where(x => x.Code == code.ToLower())
            .FirstOrDefaultAsync();
        if (SelectedCampaign is null)
        {
            Snackbar.Add("Campaign not found", Severity.Warning);
        }
        await OnSelectedCampaignChanged();
        _loading = false;
    }

    private async Task CreateNewCampaign()
    {
        _loading = true;
        await using var context = await DbFactory.CreateDbContextAsync();
        var campaign = new Campaign()
        {
            Name = _newCampaignName,
        };
        context.Campaigns.Add(campaign);
        await context.SaveChangesAsync();
        SelectedCampaign = campaign;
        await OnSelectedCampaignChanged();
        _loading = false;
    }



}