@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.EntityFrameworkCore
@using SeasonOfGhosts.Core.Campaigns
@using SeasonOfGhosts.Db
@inject IDbContextFactory<SeasonContext> DbFactory;
@inject ProtectedLocalStorage LocalStorage

<MudOverlay DarkBackground bind-Visible="@_loading">
    <MudProgressCircular Indeterminate Color="Color.Primary"></MudProgressCircular>
</MudOverlay>
<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h5">Enter your campaign code</MudText>
        <MudGrid>
            <MudItem xs="7">
                <MudTextField Immediate @bind-Value="_campaignCode" @bind-Value:after="() => SearchCampaign(_campaignCode)" Placeholder="odfzgpmfbqj" MaxLength="10"></MudTextField>
            </MudItem>
            <MudItem xs="5">
                <MudLoadingButton Disabled="_campaignCode == null" OnClick="() => SearchCampaign(_campaignCode)">Search</MudLoadingButton>
            </MudItem>
        </MudGrid>
        <MudDivider Style="margin-top: 0.5rem; margin-bottom: 0.5rem" DividerType="DividerType.FullWidth"></MudDivider>
        <MudText Typo="Typo.h5">Or create a new campaign</MudText>
        <MudForm>
            <MudTextField Label="Name" @bind-Value="@_newCampaignName"></MudTextField>
        </MudForm>
        <MudButtonGroup>
            <MudLoadingButton OnClick="CreateNewCampaign">New Campaign</MudLoadingButton>
        </MudButtonGroup>
    </MudCardContent>
</MudCard>




@code {
    private string? _campaignCode;
    private string _newCampaignName = "Season of Ghosts";
    private bool _loading;

    [Parameter]
    public Campaign? SelectedCampaign { get; set; }
    
    [Parameter]
    public EventCallback<Campaign?> SelectedCampaignChanged { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (!firstRender)
        {
            return;
        }
        var lastCampaign = await LocalStorage.GetAsync<CampaignId>(StorageKeys.LastCampaignId);
        if (lastCampaign.Success)
        {
            await using var context = await DbFactory.CreateDbContextAsync();
            SelectedCampaign = await context.Campaigns.FindAsync(lastCampaign.Value);
            await OnSelectedCampaignChanged();
        }
    }

    private async Task OnSelectedCampaignChanged()
    {
        if (SelectedCampaign is not null)
        {
            await LocalStorage.SetAsync(StorageKeys.LastCampaignId, SelectedCampaign.Id);   
        }
        await SelectedCampaignChanged.InvokeAsync(SelectedCampaign);
    }
    
    private async Task SearchCampaign(string? code)
    {
        if (code is not {Length: 10})
        {
            return;
        }

        _loading = true;
        await using var context = await DbFactory.CreateDbContextAsync();
        SelectedCampaign = await context
            .Campaigns
            .Where(x => x.Code == code)
            .FirstOrDefaultAsync();
        await OnSelectedCampaignChanged();
        _loading = false;
    }

    private async Task CreateNewCampaign()
    {
        _loading = true;
        await using var context = await DbFactory.CreateDbContextAsync();
        var campaign = new Campaign()
        {
            Name = _newCampaignName,
        };
        context.Campaigns.Add(campaign);
        await context.SaveChangesAsync();
        SelectedCampaign = campaign;
        await OnSelectedCampaignChanged();
        _loading = false;
    }



}